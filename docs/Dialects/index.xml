<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dialects on CIRCT</title><link>https://circt.llvm.org/docs/Dialects/</link><description>Recent content in Dialects on CIRCT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://circt.llvm.org/docs/Dialects/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://circt.llvm.org/docs/Dialects/FIRRTLAttributes/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/FIRRTLAttributes/</guid><description>AugmentedBooleanTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedBundleTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedDeletedTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedDoubleTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedGroundTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedIntegerTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedLiteralTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedStringTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedVectorTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr InvalidValueAttr A constant value of firrtl.</description></item><item><title>'calyx' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Calyx/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Calyx/</guid><description>Types and operations for the Calyx dialect Calyx is an intermediate language and infrastructure for building compilers that generate custom hardware accelerators. For more information, visit the documentation .
Operation definition calyx.std_add (::circt::calyx::AddLibOp) calyx.std_and (::circt::calyx::AndLibOp) calyx.assign (::circt::calyx::AssignOp) calyx.comb_group (::circt::calyx::CombGroupOp) calyx.component (::circt::calyx::ComponentOp) calyx.control (::circt::calyx::ControlOp) calyx.std_div_pipe (::circt::calyx::DivPipeLibOp) calyx.enable (::circt::calyx::EnableOp) calyx.std_eq (::circt::calyx::EqLibOp) calyx.std_ge (::circt::calyx::GeLibOp) calyx.group_done (::circt::calyx::GroupDoneOp) calyx.group_go (::circt::calyx::GroupGoOp) calyx.group (::circt::calyx::GroupOp) calyx.std_gt (::circt::calyx::GtLibOp) calyx.if (::circt::calyx::IfOp) calyx.instance (::circt::calyx::InstanceOp) calyx.std_le (::circt::calyx::LeLibOp) calyx.std_lsh (::circt::calyx::LshLibOp) calyx.std_lt (::circt::calyx::LtLibOp) calyx.</description></item><item><title>'comb' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Comb/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Comb/</guid><description>Types and operations for comb dialect This dialect defines the comb dialect, which is intended to be a generic representation of combinational logic outside of a particular use-case.
Operation definition comb.add (::circt::comb::AddOp) comb.and (::circt::comb::AndOp) comb.concat (::circt::comb::ConcatOp) comb.divs (::circt::comb::DivSOp) comb.divu (::circt::comb::DivUOp) comb.extract (::circt::comb::ExtractOp) comb.icmp (::circt::comb::ICmpOp) comb.mods (::circt::comb::ModSOp) comb.modu (::circt::comb::ModUOp) comb.mul (::circt::comb::MulOp) comb.mux (::circt::comb::MuxOp) comb.or (::circt::comb::OrOp) comb.parity (::circt::comb::ParityOp) comb.replicate (::circt::comb::ReplicateOp) comb.shl (::circt::comb::ShlOp) comb.shrs (::circt::comb::ShrSOp) comb.shru (::circt::comb::ShrUOp) comb.sub (::circt::comb::SubOp) comb.xor (::circt::comb::XorOp) Operation definition comb.</description></item><item><title>'esi' Dialect</title><link>https://circt.llvm.org/docs/Dialects/ESI/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/ESI/</guid><description>Type constraint definition An ESI-compatible channel port Operation definition esi.decode.capnp (::circt::esi::CapnpDecode) esi.encode.capnp (::circt::esi::CapnpEncode) esi.buffer (::circt::esi::ChannelBuffer) esi.cosim (::circt::esi::CosimEndpoint) esi.null (::circt::esi::NullSourceOp) esi.stage (::circt::esi::PipelineStage) esi.unwrap.iface (::circt::esi::UnwrapSVInterface) esi.unwrap.vr (::circt::esi::UnwrapValidReady) esi.wrap.iface (::circt::esi::WrapSVInterface) esi.wrap.vr (::circt::esi::WrapValidReady) Type definition ChannelPort Type constraint definition An ESI-compatible channel port An ESI port kind which models a latency-insensitive, unidirectional, point-to-point data stream. Channels are typed (like all of ESI). Said type can be any MLIR type, but must be lowered to something a backend knows how to output (i.</description></item><item><title>'firrtl' Dialect</title><link>https://circt.llvm.org/docs/Dialects/FIRRTL/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/FIRRTL/</guid><description>Types and operations for firrtl dialect This dialect defines the firrtl dialect, which is used to lower from Chisel code to Verilog. For more information, see the FIRRTL GitHub page .
Attribute definition AugmentedBooleanTypeAttr AugmentedBundleTypeAttr AugmentedDeletedTypeAttr AugmentedDoubleTypeAttr AugmentedGroundTypeAttr AugmentedIntegerTypeAttr AugmentedLiteralTypeAttr AugmentedStringTypeAttr AugmentedVectorTypeAttr InvalidValueAttr SubAnnotationAttr Type constraint definition analog type Reset AsyncReset BundleType a behavioral memory port a behavioral memory clock FIRRTLType FVectorType sint or uint type UInt, SInt, or Analog a passive type (contain no flips) Reset sint type UInt or UInt uint type Operation definition firrtl.</description></item><item><title>'fsm' Dialect</title><link>https://circt.llvm.org/docs/Dialects/FSM/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/FSM/</guid><description>Types and operations for FSM dialect This dialect defines the fsm dialect, which is intended to represent finite-state machines.
Type constraint definition An FSM instance type Operation definition fsm.hw_instance (::circt::fsm::HWInstanceOp) fsm.instance (::circt::fsm::InstanceOp) fsm.machine (::circt::fsm::MachineOp) fsm.output (::circt::fsm::OutputOp) fsm.return (::circt::fsm::ReturnOp) fsm.state (::circt::fsm::StateOp) fsm.transition (::circt::fsm::TransitionOp) fsm.trigger (::circt::fsm::TriggerOp) fsm.update (::circt::fsm::UpdateOp) fsm.variable (::circt::fsm::VariableOp) Type definition InstanceType Type constraint definition An FSM instance type Represents an FSM instance.</description></item><item><title>'handshake' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Handshake/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Handshake/</guid><description>Principle Choice of MLIR IR Representation Conventions Resources Operation definitions This document also explains in a high-level manner how different components are organized, the principles behind them and the conventions we followed. The document assume that you have basic understanding of asynchronous digital circuits at the behavioral level abstraction.
Principle Handshake/dataflow IR is describes independent, unsynchronized processes communicating data through First-in First-out (FIFO) communication channels. This can be implemented in many ways, such as using synchronous logic, or with processors.</description></item><item><title>'hw' Dialect</title><link>https://circt.llvm.org/docs/Dialects/HW/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/HW/</guid><description>Types and operations for the hardware dialect This dialect defines the hw dialect, which is intended to be a generic representation of HW outside of a particular use-case.
Attribute definition FileListAttr InnerRefAttr OutputFileAttr ParamDeclAttr ParamDeclRefAttr ParamExprAttr ParamVerbatimAttr Type constraint definition an ArrayType fixed-sized array an integer bitvector of one or more bits a type without inout a known primitive element InOutType inout type parameterized-width integer a StructType HW struct type An symbolic reference to a type declaration a UnionType An untagged union of types SystemVerilog &amp;lsquo;unpacked&amp;rsquo; fixed-sized array Operation definition hw.</description></item><item><title>'hw' Dialect</title><link>https://circt.llvm.org/docs/Dialects/SV/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/SV/</guid><description>Types and operations for the hardware dialect This dialect defines the hw dialect, which is intended to be a generic representation of HW outside of a particular use-case.
Attribute definition InnerRefAttr Type constraint definition an ArrayType an integer bitvector of one or more bits a type without inout a known primitive element InOutType a StructType a UnionType Type constraint definition SystemVerilog interface type pointing to an InterfaceOp SystemVerilog type pointing to an InterfaceModportOp Operation definition sv.</description></item><item><title>'llhd' Dialect</title><link>https://circt.llvm.org/docs/Dialects/LLHD/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/LLHD/</guid><description>A low-level hardware description dialect in MLIR.
Attribute definition TimeAttr Type constraint definition LLHD time type pointer type signal type time type Operation definition llhd.con (::circt::llhd::ConnectOp) llhd.constant_time (::circt::llhd::ConstantTimeOp) llhd.drv (::circt::llhd::DrvOp) llhd.entity (::circt::llhd::EntityOp) llhd.halt (::circt::llhd::HaltOp) llhd.inst (::circt::llhd::InstOp) llhd.load (::circt::llhd::LoadOp) llhd.prb (::circt::llhd::PrbOp) llhd.proc (::circt::llhd::ProcOp) llhd.ptr.array_get (::circt::llhd::PtrArrayGetOp) llhd.ptr.array_slice (::circt::llhd::PtrArraySliceOp) llhd.ptr.extract (::circt::llhd::PtrExtractOp) llhd.ptr.struct_extract (::circt::llhd::PtrStructExtractOp) llhd.reg (::circt::llhd::RegOp) llhd.shl (::circt::llhd::ShlOp) llhd.shr (::circt::llhd::ShrOp) llhd.sig.array_get (::circt::llhd::SigArrayGetOp) llhd.sig.array_slice (::circt::llhd::SigArraySliceOp) llhd.sig.extract (::circt::llhd::SigExtractOp) llhd.</description></item><item><title>'moore' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Moore/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Moore/</guid><description>Types and operations for Moore dialect This dialect defines the moore dialect, which represents various SystemVerilog-specific constructs without ambiguities and all types resolved.
Type constraint definition System-Verilog int type an SystemVerilog int Operation definition moore.mir.assign (::circt::moore::AssignOp) moore.mir.constant (::circt::moore::ConstantOp) moore.mir.vardecl (::circt::moore::VariableDeclOp) Type definition IntType LValueType RValueType Type constraint definition System-Verilog int type an SystemVerilog int Operation definition moore.</description></item><item><title>'msft' Dialect</title><link>https://circt.llvm.org/docs/Dialects/MSFT/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/MSFT/</guid><description>Microsoft internal support dialect Umbrella dialect for everything needed to support Microsoft development but not thoroughly discussed. Most (if not everything) in this dialect is a candidate for generalization and re-homing.
Attribute definition PhysLocationAttr PhysicalBoundsAttr PhysicalRegionRefAttr RootedInstancePathAttr SwitchInstanceAttr SwitchInstanceCaseAttr Operation definition msft.instance (::circt::msft::InstanceOp) msft.module.extern (::circt::msft::MSFTModuleExternOp) msft.module (::circt::msft::MSFTModuleOp) msft.output (::circt::msft::OutputOp) msft.physical_region (::circt::msft::PhysicalRegionOp) Attribute definition PhysLocationAttr Descibes a physical location on a device</description></item><item><title>'seq' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Seq/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Seq/</guid><description>Types and operations for seq dialect The seq dialect is intended to model digital sequential logic.
Operation definition seq.compreg (::circt::seq::CompRegOp) Operation definition seq.compreg (::circt::seq::CompRegOp) Register a value, storing it for one cycle
See the Seq dialect rationale for a longer description Traits: SameVariadicOperandSize
Interfaces: NoSideEffect (MemoryEffectOpInterface), OpAsmOpInterface
Effects: MemoryEffects::Effect{}
Attributes: Attribute MLIR Type Description name ::mlir::StringAttr string attribute Operands: Operand Description input any type clk 1-bit signless integer reset 1-bit signless integer resetValue any type Results: Result Description data any type</description></item><item><title>'staticlogic' Dialect</title><link>https://circt.llvm.org/docs/Dialects/StaticLogic/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/StaticLogic/</guid><description>Operation definition staticlogic.pipeline (::circt::staticlogic::PipelineOp) staticlogic.pipeline.register (::circt::staticlogic::PipelineRegisterOp) staticlogic.pipeline.stage (::circt::staticlogic::PipelineStageOp) staticlogic.pipeline.terminator (::circt::staticlogic::PipelineTerminatorOp) staticlogic.pipeline.while (::circt::staticlogic::PipelineWhileOp) staticlogic.return (::circt::staticlogic::ReturnOp) Operation definition staticlogic.pipeline (::circt::staticlogic::PipelineOp) pipeline operation
The &amp;ldquo;staticlogic.pipeline&amp;rdquo; operation represents a statically scheduled pipeline stucture which contains several MLIR blocks. Each MLIR block is corresponding to a pipeline stage.
Interfaces: NoSideEffect (MemoryEffectOpInterface)
Effects: MemoryEffects::Effect{}
Operands: Operand Description «unnamed» any type Results: Result Description «unnamed» any type staticlogic.</description></item></channel></rss>